"use client"

import type React from "react"
import { useState } from "react"
import { FileText, Video, Download, Share2, Loader2, Languages, PhoneCall, Bot, X } from "lucide-react"
import ReactMarkdown from "react-markdown"
import jsPDF from "jspdf"
import { AIDoctorCallModal } from "./ai-doctor-call-modal"

interface ReportAnalysisProps {
  analysis: string
  fileName: string
  fileSize: number
  onBack: () => void
}

export function ReportAnalysis({ analysis, fileName, fileSize, onBack }: ReportAnalysisProps) {
  // Debug: Log the analysis content
  console.log("ReportAnalysis received:", { analysis, fileName, fileSize })
  
  interface ContactInfo {
    name: string
    phone: string
    notes: string
  }
  const [isGeneratingVideo, setIsGeneratingVideo] = useState(false)
  const [videoScript, setVideoScript] = useState<string | null>(null)
  const [selectedLanguage, setSelectedLanguage] = useState("English")
  const [videoId, setVideoId] = useState<string | null>(null)
  const [videoUrl, setVideoUrl] = useState<string | null>(null)
  const [videoStatus, setVideoStatus] = useState<string | null>(null)
  const [showAiCallModal, setShowAiCallModal] = useState(false)
  const [showDoctorCallModal, setShowDoctorCallModal] = useState(false)
  const [showAIDoctorCallModal, setShowAIDoctorCallModal] = useState(false)
  const [contactInfo, setContactInfo] = useState<ContactInfo>({ name: "", phone: "", notes: "" })

  const languages = ["English", "Hindi", "Spanish", "Arabic", "Bengali", "Portuguese", "Urdu", "Tamil", "Telugu"]

  const handleGenerateVideo = async () => {
    setIsGeneratingVideo(true)
    setVideoStatus("generating")
    try {
      // Call HeyGen API to generate video
      const response = await fetch("/api/generate-heygen-video", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ analysis }),
      })

      const data = await response.json()
      
      console.log("Video generation response:", data)
      
      if (data.success) {
        setVideoScript(data.script)
        setVideoId(data.videoId)
        setVideoStatus("processing")
        
        // Start polling for video status
        pollVideoStatus(data.videoId)
      } else {
        setVideoStatus("error")
        console.error("Error generating video:", data)
        alert(`Failed to generate video: ${data.message || data.error || "Unknown error"}\n\nDetails: ${JSON.stringify(data.details, null, 2)}`)
      }
    } catch (error) {
      console.error("Error generating video:", error)
      setVideoStatus("error")
      alert(`Error: ${error instanceof Error ? error.message : "Unknown error"}`)
    } finally {
      setIsGeneratingVideo(false)
    }
  }

  const pollVideoStatus = async (id: string) => {
    const maxAttempts = 60 // Poll for up to 5 minutes (60 * 5 seconds)
    let attempts = 0

    const checkStatus = async () => {
      try {
        const response = await fetch("/api/check-video-status", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ videoId: id }),
        })

        const data = await response.json()

        if (data.status === "completed" && data.videoUrl) {
          setVideoUrl(data.videoUrl)
          setVideoStatus("completed")
          return
        } else if (data.status === "failed") {
          setVideoStatus("error")
          return
        }

        // Continue polling
        attempts++
        if (attempts < maxAttempts) {
          setTimeout(checkStatus, 5000) // Check every 5 seconds
        } else {
          setVideoStatus("timeout")
        }
      } catch (error) {
        console.error("Error checking video status:", error)
        setVideoStatus("error")
      }
    }

    checkStatus()
  }

  const handleDownloadPDF = async () => {
    try {
      const pdf = new jsPDF("p", "mm", "a4")
      const pageWidth = pdf.internal.pageSize.getWidth()
      const pageHeight = pdf.internal.pageSize.getHeight()
      const margin = 20
      const maxWidth = pageWidth - 2 * margin
      let yPosition = margin

      // Header
      pdf.setFontSize(20)
      pdf.setFont("helvetica", "bold")
      pdf.text("Medical Report Analysis", pageWidth / 2, yPosition, { align: "center" })
      yPosition += 10

      // Metadata
      pdf.setFontSize(10)
      pdf.setFont("helvetica", "normal")
      pdf.text(`File: ${fileName}`, pageWidth / 2, yPosition, { align: "center" })
      yPosition += 5
      pdf.text(`Size: ${(fileSize / 1024 / 1024).toFixed(2)} MB`, pageWidth / 2, yPosition, { align: "center" })
      yPosition += 5
      pdf.text(`Generated: ${new Date().toLocaleString()}`, pageWidth / 2, yPosition, { align: "center" })
      yPosition += 15

      // Content - split by lines and handle page breaks
      pdf.setFontSize(11)
      pdf.setFont("helvetica", "normal")
      
      const lines = analysis.split("\n")
      for (const line of lines) {
        // Check if we need a new page
        if (yPosition > pageHeight - margin) {
          pdf.addPage()
          yPosition = margin
        }

        // Handle different markdown elements
        if (line.startsWith("## ")) {
          pdf.setFontSize(14)
          pdf.setFont("helvetica", "bold")
          const text = line.replace("## ", "")
          const splitText = pdf.splitTextToSize(text, maxWidth)
          pdf.text(splitText, margin, yPosition)
          yPosition += splitText.length * 7 + 3
          pdf.setFontSize(11)
          pdf.setFont("helvetica", "normal")
        } else if (line.startsWith("### ")) {
          pdf.setFontSize(12)
          pdf.setFont("helvetica", "bold")
          const text = line.replace("### ", "")
          const splitText = pdf.splitTextToSize(text, maxWidth)
          pdf.text(splitText, margin, yPosition)
          yPosition += splitText.length * 6 + 2
          pdf.setFontSize(11)
          pdf.setFont("helvetica", "normal")
        } else if (line.startsWith("#### ")) {
          pdf.setFontSize(11)
          pdf.setFont("helvetica", "bold")
          const text = line.replace("#### ", "")
          const splitText = pdf.splitTextToSize(text, maxWidth)
          pdf.text(splitText, margin, yPosition)
          yPosition += splitText.length * 5 + 2
          pdf.setFont("helvetica", "normal")
        } else if (line.trim().startsWith("- ") || line.trim().startsWith("* ")) {
          const text = line.trim().replace(/^[*-]\s+/, "â€¢ ")
          const splitText = pdf.splitTextToSize(text, maxWidth - 5)
          pdf.text(splitText, margin + 5, yPosition)
          yPosition += splitText.length * 5 + 1
        } else if (line.trim()) {
          const splitText = pdf.splitTextToSize(line, maxWidth)
          pdf.text(splitText, margin, yPosition)
          yPosition += splitText.length * 5 + 2
        } else {
          yPosition += 3
        }
      }

      // Footer on last page
      pdf.setFontSize(9)
      pdf.setFont("helvetica", "italic")
      const footerY = pageHeight - 15
      pdf.text("Powered by Tabeer AI", pageWidth / 2, footerY, { align: "center" })
      pdf.text("AI-Generated Medical Analysis | For Educational Purposes Only", pageWidth / 2, footerY + 4, {
        align: "center",
      })

      // Save PDF
      pdf.save(`Medical_Report_Analysis_${fileName.replace(/\.[^/.]+$/, "")}_${new Date().getTime()}.pdf`)
    } catch (error) {
      console.error("Error downloading report:", error)
      alert("Failed to download report. Please try again.")
    }
  }

  const handleShare = async () => {
    const shareText = `Medical Report Analysis - ${fileName}\n\nGenerated: ${new Date().toLocaleString()}\n\nPowered by Tabeer AI`

    if (navigator.share) {
      try {
        await navigator.share({
          title: "Medical Report Analysis",
          text: shareText,
          url: window.location.href,
        })
      } catch (error) {
        if ((error as Error).name !== "AbortError") {
          console.error("Error sharing:", error)
          copyToClipboard()
        }
      }
    } else {
      copyToClipboard()
    }
  }

  const copyToClipboard = () => {
    const textToCopy = `Medical Report Analysis\n\nFile: ${fileName}\nGenerated: ${new Date().toLocaleString()}\n\n${analysis}\n\nPowered by Tabeer AI`
    navigator.clipboard
      .writeText(textToCopy)
      .then(() => {
        alert("Report copied to clipboard!")
      })
      .catch((error) => {
        console.error("Error copying to clipboard:", error)
        alert("Failed to copy. Please try again.")
      })
  }

  return (
    <div className="w-full min-h-screen bg-[#F7F5F3]">
      {/* Fixed Header - Like ChatGPT */}
      <div className="sticky top-0 z-10 bg-white/80 backdrop-blur-xl border-b border-[rgba(55,50,47,0.08)]">
        <div className="max-w-3xl mx-auto px-4 sm:px-6 py-4 flex items-center justify-between">
          <button 
            onClick={onBack} 
            className="text-[#605A57] hover:text-[#37322F] font-medium transition-colors text-sm flex items-center gap-2"
          >
            <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
            Back
          </button>
          <div className="flex gap-2">
            <button
              onClick={handleShare}
              className="p-2 hover:bg-[#F7F5F3] rounded-lg transition-colors"
              title="Share"
            >
              <Share2 className="w-4 h-4 text-[#605A57]" />
            </button>
            <button
              onClick={handleDownloadPDF}
              className="p-2 hover:bg-[#F7F5F3] rounded-lg transition-colors"
              title="Download"
            >
              <Download className="w-4 h-4 text-[#605A57]" />
            </button>
            <button
              onClick={() => setShowAIDoctorCallModal(true)}
              className="px-4 py-2 bg-[#37322F] text-white rounded-lg text-sm font-medium hover:bg-[#37322F]/90 transition flex items-center gap-2"
            >
              <Bot className="w-4 h-4" />
              AI Call
            </button>
          </div>
        </div>
      </div>

      {/* Main Content - Centered like ChatGPT */}
      <div className="max-w-3xl mx-auto px-4 sm:px-6 py-8">
        <div className="space-y-6">
          {/* File Info Card */}
          <div className="bg-white rounded-lg border border-[rgba(55,50,47,0.08)] p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-[#F7F5F3] rounded-lg">
                <FileText className="w-5 h-5 text-[#37322F]" />
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-[#37322F] truncate">{fileName}</p>
                <p className="text-xs text-[#605A57]">
                  {(fileSize / 1024 / 1024).toFixed(2)} MB â€¢ {new Date().toLocaleDateString()}
                </p>
              </div>
            </div>
          </div>

          {/* Report Content - Clean & Centered */}
          <div className="bg-white rounded-lg border border-[rgba(55,50,47,0.08)] p-6 sm:p-8">
            {analysis && analysis.trim() ? (
              <div className="prose prose-base max-w-none">
                <ReactMarkdown
                  components={{
                    h2: ({ children }: { children: React.ReactNode }) => (
                      <h2 className="text-xl font-semibold text-[#37322F] mt-6 mb-3 first:mt-0">
                        {children}
                      </h2>
                    ),
                    h3: ({ children }: { children: React.ReactNode }) => (
                      <h3 className="text-lg font-semibold text-[#37322F] mt-5 mb-2">{children}</h3>
                    ),
                    p: ({ children }: { children: React.ReactNode }) => (
                      <p className="text-[#37322F] leading-relaxed mb-4">{children}</p>
                    ),
                    ul: ({ children }: { children: React.ReactNode }) => (
                      <ul className="space-y-2 mb-4 ml-4">{children}</ul>
                    ),
                    li: ({ children }: { children: React.ReactNode }) => (
                      <li className="text-[#37322F] leading-relaxed flex gap-2">
                        <span className="text-[#605A57] mt-1.5">â€¢</span>
                        <span className="flex-1">{children}</span>
                      </li>
                    ),
                    strong: ({ children }: { children: React.ReactNode }) => (
                      <strong className="font-semibold text-[#37322F]">{children}</strong>
                    ),
                  }}
                >
                  {analysis}
                </ReactMarkdown>
              </div>
            ) : (
              <div className="text-center py-10">
                <p className="text-[#605A57]">No analysis content available.</p>
                <p className="text-[#605A57] text-sm mt-2">Please try uploading your report again.</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Modals */}
      <AIDoctorCallModal
        isOpen={showAIDoctorCallModal}
        onClose={() => setShowAIDoctorCallModal(false)}
        healthContext={analysis.substring(0, 200)}
      />

      {/* Old modals - keeping for compatibility */}
      {showAiCallModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm">
          <div className="bg-white rounded-2xl p-8 max-w-md w-full">
            <button onClick={() => setShowAiCallModal(false)} className="float-right">
              <X className="w-5 h-5" />
            </button>
            <h3 className="text-xl font-bold text-[#37322F] mb-4">AI Call Feature</h3>
            <p className="text-[#605A57]">AI call feature coming soon!</p>
          </div>
        </div>
      )}

      {showDoctorCallModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm">
          <div className="bg-white rounded-2xl p-8 max-w-md w-full relative">
            <button
              onClick={() => setShowDoctorCallModal(false)}
              className="absolute top-4 right-4 p-2 hover:bg-gray-100 rounded-full"
            >
              <X className="w-5 h-5" />
            </button>
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 rounded-lg bg-[#37322F]/10">
                <PhoneCall className="w-5 h-5 text-[#37322F]" />
              </div>
              <h3 className="text-lg font-semibold text-[#37322F]">Request a Doctor Call</h3>
            </div>
            <p className="text-[#605A57] mb-6">
              A qualified doctor will review your report and call you back within 24 hours.
            </p>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="Your Name"
                value={contactInfo.name}
                onChange={(e) => setContactInfo({ ...contactInfo, name: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg"
              />
              <input
                type="tel"
                placeholder="Phone Number"
                value={contactInfo.phone}
                onChange={(e) => setContactInfo({ ...contactInfo, phone: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg"
              />
              <textarea
                placeholder="Additional Notes (Optional)"
                value={contactInfo.notes}
                onChange={(e) => setContactInfo({ ...contactInfo, notes: e.target.value })}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg h-24"
              />
              <button
                onClick={() => {
                  setShowDoctorCallModal(false)
                  alert("Doctor call request submitted. We will contact you soon.")
                }}
                className="px-4 py-3 bg-[#37322F] text-white rounded-lg font-semibold hover:bg-[#37322F]/90 w-full"
              >
                Request Callback
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
                </button>
                <button
                  onClick={() => setShowDoctorCallModal(true)}
                  className="w-full px-5 py-3 rounded-xl bg-white text-[#37322F] font-semibold border border-[#37322F]/20 hover:bg-white/70 transition flex items-center justify-center gap-2"
                >
                  <PhoneCall className="w-5 h-5" /> Doctor Call
                </button>
              </div>

              <div className="mt-5 text-xs text-[#605A57]">
                <p>Typical wait time: under 5 minutes for AI, under 24 hours for doctor callback.</p>
              </div>
            </div>

            {/* Video Generation Section - Moved below Doctor Call */}
            <div className="bg-white/60 backdrop-blur-xl rounded-2xl border border-white/80 shadow-xl p-6">
              <div className="flex items-start gap-3 mb-4">
                <div className="p-2 bg-gradient-to-br from-[#37322F]/10 to-[#37322F]/5 rounded-lg">
                  <Video className="w-5 h-5 text-[#37322F]" />
                </div>
                <div className="flex-1">
                  <h3 className="text-base font-bold text-[#37322F] mb-1">Video Explanation</h3>
                  <p className="text-[#605A57] text-xs">
                    Get a video in your language
                  </p>
                </div>
              </div>

              {/* Language Selection */}
              <div className="mb-4">
                <label className="flex items-center gap-2 text-xs font-medium text-[#37322F] mb-2">
                  <Languages className="w-3 h-3" />
                  Select Language
                </label>
                <div className="grid grid-cols-2 gap-2">
                  {languages.slice(0, 6).map((lang) => (
                    <button
                      key={lang}
                      onClick={() => setSelectedLanguage(lang)}
                      className={`px-3 py-2 rounded-lg text-xs font-medium transition-all ${
                        selectedLanguage === lang
                          ? "bg-[#37322F] text-white shadow-md"
                          : "bg-white/60 text-[#605A57] hover:bg-white/80"
                      }`}
                    >
                      {lang}
                    </button>
                  ))}
                </div>
              </div>

              {/* Generate Button */}
              <button
                onClick={handleGenerateVideo}
                disabled={isGeneratingVideo}
                className="w-full px-4 py-3 bg-gradient-to-r from-[#37322F] to-[#37322F]/90 hover:from-[#37322F]/90 hover:to-[#37322F] text-white rounded-xl font-semibold text-sm shadow-lg transition-all duration-200 hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {isGeneratingVideo ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Video className="w-4 h-4" />
                    Generate Video
                  </>
                )}
              </button>

              {/* Video Status and Display */}
              {videoStatus && (
                <div className="mt-4 p-4 bg-gradient-to-br from-white/80 to-white/60 rounded-lg border border-white/80">
                  {videoStatus === "generating" && (
                    <div className="flex items-center gap-2 text-[#37322F]">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span className="text-xs">Creating short script...</span>
                    </div>
                  )}
                  
                  {videoStatus === "processing" && (
                    <div className="space-y-3">
                      <div className="flex items-center gap-2 text-[#37322F]">
                        <Loader2 className="w-4 h-4 animate-spin" />
                        <span className="text-xs">Generating AI video... This may take 2-3 minutes</span>
                      </div>
                      {videoScript && (
                        <div className="text-xs text-[#605A57] bg-white/50 p-2 rounded">
                          <strong>Script:</strong> {videoScript.substring(0, 100)}...
                        </div>
                      )}
                    </div>
                  )}
                  
                  {videoStatus === "completed" && videoUrl && (
                    <div className="space-y-3">
                      <h4 className="text-sm font-bold text-[#37322F] flex items-center gap-2">
                        <Video className="w-4 h-4" />
                        Your Video is Ready!
                      </h4>
                      <video 
                        controls 
                        className="w-full rounded-lg"
                        src={videoUrl}
                      >
                        Your browser does not support the video tag.
                      </video>
                      <a
                        href={videoUrl}
                        download
                        className="block w-full px-3 py-2 bg-[#37322F] text-white rounded-lg text-xs font-medium hover:bg-[#37322F]/90 transition-colors text-center"
                      >
                        Download Video
                      </a>
                    </div>
                  )}
                  
                  {videoStatus === "error" && (
                    <div className="text-xs text-red-600 space-y-2">
                      <p className="font-semibold">Failed to generate video</p>
                      <p className="text-xs">Check the browser console (F12) for detailed error information.</p>
                      <button 
                        onClick={() => {
                          setVideoStatus(null)
                          setVideoScript(null)
                        }}
                        className="text-xs underline hover:no-underline"
                      >
                        Try Again
                      </button>
                    </div>
                  )}
                  
                  {videoStatus === "timeout" && (
                    <div className="text-xs text-yellow-600">
                      Video generation is taking longer than expected. Please check back later.
                    </div>
                  )}
                </div>
              )}
            </div>

            <div className="bg-white/60 rounded-2xl p-5 border border-white/80">
              <h4 className="text-sm font-semibold text-[#37322F] mb-2">What we can discuss</h4>
              <ul className="list-disc list-inside text-sm text-[#605A57] space-y-1">
                <li>Abnormal values and what they mean</li>
                <li>Next steps and lifestyle tips</li>
                <li>Follow-up tests to consider</li>
              </ul>
            </div>
          </aside>
        </div>

        {/* AI Call Modal */}
        {showAiCallModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center">
            <div className="absolute inset-0 bg-black/30" onClick={() => setShowAiCallModal(false)} />
            <div className="relative bg-white rounded-2xl shadow-2xl w-full max-w-md p-6">
              <button
                className="absolute top-3 right-3 p-2 rounded-full hover:bg-black/5"
                onClick={() => setShowAiCallModal(false)}
                aria-label="Close AI Call"
              >
                <X className="w-5 h-5 text-[#605A57]" />
              </button>
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-lg bg-[#37322F]/10">
                  <Bot className="w-5 h-5 text-[#37322F]" />
                </div>
                <h3 className="text-lg font-semibold text-[#37322F]">Start an AI Call</h3>
              </div>
              <p className="text-sm text-[#605A57] mb-4">Enter your details to receive an instant AI voice call link.</p>
              <div className="space-y-3">
                <input
                  placeholder="Your name"
                  value={contactInfo.name}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                    setContactInfo((c: ContactInfo) => ({ ...c, name: e.target.value }))
                  }
                  className="w-full px-3 py-2 border border-[#E3E2E1] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#37322F]"
                />
                <input
                  placeholder="Phone or email"
                  value={contactInfo.phone}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                    setContactInfo((c: ContactInfo) => ({ ...c, phone: e.target.value }))
                  }
                  className="w-full px-3 py-2 border border-[#E3E2E1] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#37322F]"
                />
                <textarea
                  placeholder="Any specific questions?"
                  value={contactInfo.notes}
                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                    setContactInfo((c: ContactInfo) => ({ ...c, notes: e.target.value }))
                  }
                  className="w-full px-3 py-2 border border-[#E3E2E1] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#37322F]"
                  rows={3}
                />
              </div>
              <button
                onClick={() => {
                  // Placeholder: integrate with your voice call backend/provider
                  setShowAiCallModal(false)
                  alert("AI call link will be sent to you shortly.")
                }}
                className="mt-4 w-full px-4 py-3 bg-[#37322F] text-white rounded-lg font-semibold hover:bg-[#37322F]/90"
              >
                Get AI Call Link
              </button>
            </div>
          </div>
        )}

        {/* Doctor Call Modal */}
        {showDoctorCallModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center">
            <div className="absolute inset-0 bg-black/30" onClick={() => setShowDoctorCallModal(false)} />
            <div className="relative bg-white rounded-2xl shadow-2xl w-full max-w-md p-6">
              <button
                className="absolute top-3 right-3 p-2 rounded-full hover:bg-black/5"
                onClick={() => setShowDoctorCallModal(false)}
                aria-label="Close Doctor Call"
              >
                <X className="w-5 h-5 text-[#605A57]" />
              </button>
              <div className="flex items-center gap-3 mb-4">
                <div className="p-2 rounded-lg bg-[#37322F]/10">
                  <PhoneCall className="w-5 h-5 text-[#37322F]" />
                </div>
                <h3 className="text-lg font-semibold text-[#37322F]">Request a Doctor Call</h3>
              </div>
              <p className="text-sm text-[#605A57] mb-4">Provide your contact and preferred time. Weâ€™ll arrange a callback.</p>
              <div className="space-y-3">
                <input
                  placeholder="Your name"
                  value={contactInfo.name}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                    setContactInfo((c) => ({ ...c, name: e.target.value }))
                  }
                  className="w-full px-3 py-2 border border-[#E3E2E1] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#37322F]"
                />
                <input
                  placeholder="Phone number"
                  value={contactInfo.phone}
                  onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                    setContactInfo((c) => ({ ...c, phone: e.target.value }))
                  }
                  className="w-full px-3 py-2 border border-[#E3E2E1] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#37322F]"
                />
                <textarea
                  placeholder="Notes or preferred time"
                  value={contactInfo.notes}
                  onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                    setContactInfo((c) => ({ ...c, notes: e.target.value }))
                  }
                  className="w-full px-3 py-2 border border-[#E3E2E1] rounded-lg focus:outline-none focus:ring-2 focus:ring-[#37322F]"
                  rows={3}
                />
              </div>
              <div className="mt-4 grid grid-cols-2 gap-3">
                <a
                  href="tel:+10000000000"
                  className="px-4 py-3 text-center border border-[#37322F]/20 rounded-lg font-semibold text-[#37322F] hover:bg-white/70"
                >
                  Call Now
                </a>
                <button
                  onClick={() => {
                    // Placeholder: send request to backend for scheduling
                    setShowDoctorCallModal(false)
                    alert("Doctor call request submitted. We will contact you soon.")
                  }}
                  className="px-4 py-3 bg-[#37322F] text-white rounded-lg font-semibold hover:bg-[#37322F]/90"
                >
                  Request Callback
                </button>
              </div>
            </div>
          </div>
        )}

        {/* AI Doctor Call Modal */}
        <AIDoctorCallModal
          isOpen={showAIDoctorCallModal}
          onClose={() => setShowAIDoctorCallModal(false)}
          healthContext={analysis.substring(0, 200)}
        />
      </div>
    </div>
  )
}
